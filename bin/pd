#!/usr/bin/env sh
# This script is part of Martin V\"ath's archwrap project.
# (C) Martin V\"ath <martin at mvath.de>
# SPDX-License-Identifier: BSD-3-Clause
set -u
. archwrap.sh

Usage() {
	Echo "Usage: ${0##*/} [option] ... [option] directory directory ...
where option is one of the following:
-X   use long appendix (.tar.gz instead of .tgz etc)
-d   pack also (parent) directory into archive, not only its content
-C   Store as much as possible (Access Control Lists, creation time...)
-c   use secure mode (otherwise -no-fsync is used in star if possible)
-s   show only which files would be deleted, do not actually do it
-n   deselect all compressors (only delete longer existing archives)
-a   select all compressors and leave *.tar
-A   select all compressors except plain tar
-N   use plain owner name instead of numerical value for .tar
-S/T use star/tar (default is as in tgzd script)
-t/U select/unselect tar (i.e. *.tar is not deleted, even if it is longer)
-z/Z select/unselect zip
-o/O select/unselect brotli
-y/Y select/unselect zstd
-b/B select/unselect bzip
-3/2 select/unselect bzip3
-g/G select/unselect gzip
-i/I select/unselect lz4
-7// select/unselect 7z
-l/L select/unselect lzma
-w/W select/unselect xzd
-r/R select/unselect lrzip
-P   Unselect less widespread archivers (default if called as ppd),
     currently: 7z brotli lrzip lzma xz zstd
-p   assume that already existing archives contain correct contents
-F   symbolic links are stored as such (default)
-f   symbolic links are stored as files
-E   break on error
-0   compare exact sizes
-5   compare sizes modulo 512 bytes (default)
-1/2/4/8/6 compare sizes modulo 1k/2k/4k/8k/16k
-v   verbose
-q   quiet
-Q   quick: Use gzip instead of zopfli (even if zopfli is available)"
	exit ${1:-1}
}
unset zipd tgzd gzipbest brotlibest bzipbest bzip3best za lz4best \
	lzmabest xzbest zstdbest lrzip
tgzapp='tgz'
tbrapp='tbr'
tbzapp='tbz'
tb3app='tb3'
svzapp='t7z'
tz4app='tz4'
lzmapp='tlz'
txzapp='txz'
tzsapp='tzs'
lrzapp='tlr'
showonly=false
preserv=false
modulo=512
linksresolve='-F'
withparent=
plainowner=
nostar=
control=
secmode=
errbreak=false
verbose=false
quiet=false
quick=false

Selectall() {
	withzip=:
	withtgz=:
	withtbr=:
	withtbz=:
	withtb3=:
	withsvz=:
	withtz4=:
	withlzm=:
	withtxz=:
	withtzs=:
	withlrz=:
	#withtar=:
}
Selectnone() {
	withzip=false
	withtgz=false
	withtbr=false
	withtbz=false
	withtb3=false
	withsvz=false
	withtz4=false
	withlzm=false
	withtxz=false
	withtzs=false
	withlrz=false
	#withtar=false
}
DeselectUnpopular() {
	withsvz=false
	withtz4=false
	withlrz=false
	withlzm=false
	withtbr=false
	withtzs=false
	withtxz=false
}


Selectall
withtar=false
case ${0##*/} in
*ppd*)
	DeselectUnpopular;;
esac

OPTIND=1
while getopts 'vPqQXdcCSTsnaA327/iIlLrYyWwRNtUzZoObBgGpFf0512486EhH' opt
do	case $opt in
	v)	verbose=:;;
	P)	DeselectUnpopular;;
	q)	quiet=:;;
	Q)	quick=:;;
	X)	tgzapp='tar.gz'
		tbrapp='tar.br'
		tbzapp='tar.bz2'
		tb3app='tar.bz3'
		svzapp='tar.7z'
		tz4app='tar.lz4'
		lzmapp='tar.lzma'
		txzapp='tar.xz'
		tzsapp='tar.zst'
		lrzapp='tar.lrz';;
	d)	withparent='-d';;
	c)	secmode='-c';;
	C)	control='-C';;
	s)	showonly=:;;
	n)	Selectnone
		withtar=false;;
	a)	Selectall
		withtar=:;;
	A)	Selectall
		withtar=false;;
	N)	plainowner='-n';;
	S)	nostar='-S';;
	t)	withtar=:;;
	z)	withzip=:;;
	o)	withtbr=:;;
	b)	withtbz=:;;
	3)	withtb3=:;;
	g)	withtgz=:;;
	7)	withsvz=:;;
	i)	withtz4=:;;
	l)	withlzm=:;;
	w)	withtxz=:;;
	y)	withtzs=:;;
	r)	withlrz=:;;
	T)	nostar='-T';;
	U)	withtar=false;;
	Z)	withzip=false;;
	O)	withtbr=false;;
	B)	withtbz=false;;
	2)	withtb3=false;;
	G)	withtgz=false;;
	/)	withsvz=false;;
	I)	withtz4=false;;
	L)	withlzm=false;;
	W)	withtxz=false;;
	Y)	withtzs=false;;
	R)	withlrz=false;;
	p)	preserv=:;;
	F)	linksresolve=;;
	f)	linksresolve='-f';;
	0)	modulo=;;
	5)	modulo=512;;
	1)	modulo=1024;;
	2)	modulo=2048;;
	4)	modulo=4096;;
	8)	modulo=8192;;
	6)	modulo=16384;;
	E)	errbreak=:;;
	'?')	exit 1;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND - 1 ))
[ $# -gt 0 ] || Usage

quietopt=
$verbose || quietopt=-q

if $quiet
then	EchoCond() {
	:
}
else	EchoCond() {
	Echo "$@"
}
fi

quickopt=
! $quick || quickopt=Q

Errunp() {
	Error 2 "Error when calling $1 to create $2"
}

Remove() {
	EchoCond "Removing $*"
	$showonly || rm -- "$@"
}

# The function Compare expects $namea and $nameb to be set to the filenames
# to be compared. It will then delete the larger file (length modulo $modulo),
# and will set namea to the non-deleted file. If the length is the same,
# the second file will be deleted.
# If one or both files do not exist, nothing is deleted. In this case,
# namea is set to the file which exists (if none exists, it is put to nameb).
Compare() {
	if ! test -r "$namea" || ! sizea=`stat -c '%s' -- "$namea"` \
		|| ! [ "$sizea" -gt 0 ]
	then	namea=$nameb
		return
	fi
	test -r "$nameb" && sizeb=`stat -c '%s' -- "$nameb"` \
		&& [ "$sizeb" -gt 0 ] || return
	if [ -n "${modulo:++}" ]
	then	sizea=$(( $sizea / $modulo ))
		sizeb=$(( $sizeb / $modulo ))
	fi
	if [ $sizea -gt $sizeb ]
	then	delname=$namea
		namea=$nameb
	else	delname=$nameb
	fi
	Remove "$delname"
}

Dopack() {
	topack=${1%/}
	if ! test -d "$topack"
	then	Error 1 "argument $destname is not a directory"
		continue
	fi
	destname=${topack##*/}
	zipnow=$withzip
	tarnow=$withtar
	tgznow=$withtgz
	tbrnow=$withtbr
	tbznow=$withtbz
	tb3now=$withtb3
	svznow=$withsvz
	tz4now=$withtz4
	lzmnow=$withlzm
	txznow=$withtxz
	tzsnow=$withtzs
	lrznow=$withlrz
	if $preserv
	then	$zipnow && test -s "$destname.zip" && zipnow=false
		$tgznow && test -s "$destname.$tgzapp" && tgznow=false
		$tbrnow && test -s "$destname.$tbrapp" && tbrnow=false
		$tbznow && test -s "$destname.$tbzapp" && tbznow=false
		$tb3now && test -s "$destname.$tb3app" && tb3now=false
		$svznow && test -s "$destname.$svzapp" && svznow=false
		$tz4now && test -s "$destname.$tz4app" && tz4now=false
		$lzmnow && test -s "$destname.$lzmapp" && lzmnow=false
		$txznow && test -s "$destname.$txzapp" && txznow=false
		$tzsnow && test -s "$destname.$txzapp" && tzsnow=false
		$lrznow && test -s "$destname.$lrzapp" && lrznow=false
	fi
	if $tgznow || $tbrnow || $tbznow || $tb3now || $svznow || $tz4now || \
		 $lzmnow || $txznow || $tzsnow || $lrznow
	then	tarnow=:
	fi
	$preserv && $tarnow && test -s "$destname.tar" && tarnow=false

	namea=$destname.zip
	if $zipnow
	then	EchoCond "Creating $namea"
		OptExternal zipd
		"$zipd" $quietopt $withparent $linksresolve -- "$topack" \
			|| Errunp 'zipd' "$namea"
	fi
	if $tarnow
	then	EchoCond "Creating $destname.tar"
		OptExternal tgzd
		"$tgzd" -t$quickopt $quietopt $nostar $control $secmode $withparent $linksresolve $plainowner -- "$topack" \
			|| Errunp 'tgzd' "$destname.tar"
	fi
	nameb=$destname.$tgzapp
	if $tgznow
	then	EchoCond "Creating $nameb"
		CalcGzipbest $quick
		"$gzipbest" -c -- "$destname.tar" >|"$nameb" \
			|| Errunp "$gziptext" "$nameb"
	fi
	Compare
	nameb=$destname.$tbrapp
	if $tbrnow
	then	EchoCond "Creating $nameb"
		OptExternal brotlibest
		"$brotlibest" -o "$nameb" -- "$destname.tar" \
			|| Errunp 'brotli' "$nameb"
	fi
	Compare
	nameb=$destname.$tbzapp
	if $tbznow
	then	EchoCond "Creating $nameb"
		OptExternal bzipbest
		"$bzipbest" -k -c -- "$destname.tar" >|"$nameb" \
			|| Errunp 'bzip2' "$nameb"
	fi
	Compare
	nameb=$destname.$tb3app
	if $tb3now
	then	EchoCond "Creating $nameb"
		OptExternal bzip3best
		"$bzip3best" -c -- "$destname.tar" >|"$nameb" \
			|| Errunp 'bzip3' "$nameb"
	fi
	Compare
	nameb=$destname.$svzapp
	if $svznow
	then	EchoCond "Creating $nameb"
		OptExternal za 7za
		if $verbose
		then	"$za" a -- "$nameb" "$destname.tar"
		else	"$za" a -bd -- "$nameb" "$destname.tar" >/dev/null
		fi || Errunp '7za' "$nameb"
	fi
	Compare
	nameb=$destname.$tz4app
	if $tz4now
	then	EchoCond "Creating $nameb"
		OptExternal lz4best
		"$lz4best" $quietopt "$destname.tar" "$nameb" \
			|| Errunp 'lz4' "$nameb"
	fi
	Compare
	nameb=$destname.$lzmapp
	if $lzmnow
	then	EchoCond "Creating $nameb"
		OptExternal lzmabest
		"$lzmabest" -k -c -- "$destname.tar" >"$nameb" \
			|| Errunp 'lzma' "$nameb"
	fi
	Compare
	nameb=$destname.$txzapp
	if $txznow
	then	EchoCond "Creating $nameb"
		OptExternal xzbest
		"$xzbest" -k -c -- "$destname.tar" >"$nameb" \
			|| Errunp 'xz' "$nameb"
	fi
	Compare
	nameb=$destname.$tzsapp
	if $tzsnow
	then	EchoCond "Creating $nameb"
		OptExternal zstdbest
		"$zstdbest" $quietopt -o "$nameb" <"$destname.tar" \
			|| Errunp 'zstd' "$nameb"
	fi
	Compare
	nameb=$destname.$lrzapp
	if $lrznow
	then	EchoCond "Creating $nameb"
		namex=$destname.tar.lrz
		OptExternal lrzip
		"$lrzip" -L 9 -o "$namex" $quietopt -- "$destname.tar" && {
			[ x"$namex" = x"$nameb" ] || \
				mv -- "$namex" "$nameb"
		} || Errunp 'lrzip' "$nameb"
	fi
	Compare
	! $withtar && $tarnow && Remove "$destname.tar"
}

for drpck
do	Dopack "$drpck"
done

Exit
