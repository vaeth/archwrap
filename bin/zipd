#!/usr/bin/env sh
# This script is part of Martin V\"ath's archwrap project.
# (C) Martin V\"ath <martin at mvath.de>
# SPDX-License-Identifier: BSD-3-Clause
set -u
. archwrap.sh

Usage() {
	Echo "Usage: ${0##*/} [option] [path/]zipdir[/]
Create archive ./zipdir.zip with contents of zipdir
options:
-F: Symbolic links are stored as such (default)
-f: Symbolic links are stored as files
-k: dos compatibility
-d: Pack also (parent) directory into archive, not only its content
-D: Pack (parent) directory as "." into archive, not only its content
-E: Break on error
-q: Quiet"
	exit ${1:-1}
}
Push -c zipopts '-9' '-r'
symlink=false
withparent=false
dotparent=false
errbreak=false
compat=false
quiet=false
OPTIND=1
while getopts 'FfdDkEqhH' opt
do	case $opt in
	F)	symlink=:;;
	d)	withparent=:
		dotparent=false;;
	D)	withparent=:
		dotparent=:;;
	k)	compat=:;;
	E)	errbreak=:;;
	f)	symlink=false;;
	q)	quiet=:;;
	'?')	exit 1;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND - 1 ))
[ $# -ne 0 ] || Usage

$symlink && Push zipopts '-y'
$compat  && Push zipopts '-k'
! $quiet || Push zipopts '-q'

MakeExternal zip zip

d=$PWD
for argu
do	stat=0
	name=${argu%.zip}
	name=${name%/}
	Cd "$d" || stat=$?
	if ! test -d "$name"
	then	Err 1 "Could not find Directory $name"
		continue
	fi
	Cd "$name" || stat=$?
	zipfile=$d/${name##*/}
	if $compat
	then	zipfile=$zipfile.ZIP
	else	zipfile=$zipfile.zip
	fi
	if test -r "$zipfile"
	then	$quiet || Echo "removing old $zipfile"
		rm -f -- "$zipfile"
	fi
	if $withparent
	then	[ $stat -eq 0 ] && Cd .. || stat=$?
		if $dotparent
		then	Push -c topack='.'
		else	Push -c topack "${name##*/}"
		fi
	else	PushTopack || {
			stat=2
			Error $stat "not creating empty archive $archive"
		}
	fi
	[ $stat -eq 0 ] && \
		eval "\"\$zip\" $zipopts \"\$zipfile\" $topack" \
		|| Error $? "Error when zipping $name"
done

Exit
