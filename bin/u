#!/usr/bin/env sh
# This script is part of Martin V\"ath's archwrap project.
# (C) Martin V\"ath <martin at mvath.de>
# SPDX-License-Identifier: BSD-3-Clause
set -u
. archwrap.sh

set -f

Usage() {
	Echo "Usage: ${0##*/} [options] [path/]ARCHIVE[.ext]
Uncompress/view/test ARCHIVE. The following options are available:
-d uncompress into new directory ./ARCHIVE instead of .
-2DIR uncompress into new directory ./DIR instead of .
-v view contents of ARCHIVE (verbose)
-l list contents of ARCHIVE (non-verbose)
-f force overwrite, if directory ./ARCHIVE already exists
-t test integrity of ARCHIVE
-s use star instead of tar, ignore GNUTARVERSION
-T use tar instead of star (default)
-E break on error
-j junk pathnames (only for zip, arj, rar, 7z)
-L convert pathnames into lower case (only for .zip)
-a do not restore permission attributes (only for .tar)
-A restore extended attributes (if supported by tar); default if XATTR is true
-X restore user id/group id (only for .zip and .tar) (default for root)
-x do not restore user id/group id
-C restore Access Control Lists (for star)
-c be careful - avoid star -no-fsync; same as STAR_HAS_NOFSYNC=false
-n use plain owner name instead of numerical value (only for .tar)
-p ignore GNUTARVERSION and STAR_HAS_NOFSYNC environment variables
-P print output appropriate for setting GNUTARVERSION and exit
-q quiet"
	exit ${1:-1}
}

CalcXattr
restowner=
use_star=false
mdir=false
show=false
force=false
dotest=false
junk=false
preserve=:
ownernum=:
use_acl=false
errbreak=false
lower=false
toname=
verbose=
quiet=false
calc_version_only=false
case ${0##*/} in
*ud*)	mdir=:;;
*uv*)	show=:;;
esac
OPTIND=1
while getopts 'qd2:STflvtjaAXxcCnLpPEhH' opt
do	case $opt in
	q)	quiet=:;;
	d)	mdir=:;;
	2)	mdir=:
		toname=$OPTARG;;
	S)	use_star=:;;
	T)	use_star=false;;
	f)	force=:;;
	l)	show=:;;
	v)	show=:
		verbose='-v';;
	t)	dotest=:;;
	j)	junk=:;;
	a)	preserve=false;;
	A)	xattr=:;;
	X)	restowner=:;;
	x)	restowner=false;;
	c)	unset STAR_HAS_NOFSYNC;;
	C)	use_acl=:;;
	n)	ownernum=false;;
	L)	lower=:;;
	p)	unset GNUTARVERSION STAR_HAS_NOFSYNC;;
	P)	calc_version_only=:;;
	E)	errbreak=:;;
	'?')	exit 1;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND - 1 ))

if $calc_version_only
then	tarprg=
	CalcGnuTarVersion && printf '%s' "$GNUTARVERSION"
	exit
fi

[ $# -ne 0 ] || Usage

if [ -z "$restowner" ]
then	if [ "`id -u`" -eq 0 ]
	then	restowner=:
	else	restowner=false
	fi
fi

if $quiet
then	verboseopt=
	quietopt='-q'
	redir='>/dev/null'
else	verboseopt='-v'
	quietopt=
	redir=
fi

if $dotest
then	show=:
	mode='testing'
elif $show
then	mode='showing'
else	mode='unpacking'
fi

SetTarPrg
Push -c taropts
! $preserve || Push taropts '-p'
if $use_star
then	gzipflag='-z'
	bzipflag='-bz'
	! $use_acl || Push taropts '-acl'
	! $ownernum || Push taropts '-numeric'
	$restowner || Push taropts '-o'
	! $star_has_no_fsync || Push taropts '-no-fsync'
	! $xattr || Push taropts '-xattr'
else	gzipflag='--gzip'
	bzipflag='--bzip2'
	xzflag='--xz'
	lzmaflag='--lzma'
	taruse='--use-compress-program'
	! $tar_knows_no_auto_compress || Push taropts '--no-auto-compress'
	! $tar_knows_numeric_owner || ! $ownernum || Push taropts '--numeric-owner'
	! $restowner || Push taropts '--same-owner'
	! $xattr || ! $tar_knows_xattr || Push taropts '--xattrs'
fi

Push -c zipopts $quietopt
! $restowner || Push zipopts '-X'
! $lower || Push zipopts '-L'
! $junk || Push zipopts '-j'

Getf() {
	f=$1
	test -f "$f" && return
	for i in '' .tar .TAR
	do	for j in \
			z br bro brotli tbr zst zstd tzs tzst tzstd \
			bz2 bz3 bz tbz2 tbz3 tb3 tbz gz tgz taz dir tl4 tz4 \
			tlz4 lz4 7z t7z lz lzm lzma xz tlz txz lrz tlr tlrz \
			lha lzh arj arz zip jar xpi crate cra apk okular rar \
			Z BR BRO BROTLI TBR ZST ZSTD TZS TZST TZSTD \
			BZ2 BZ3 BZ TBZ2 TBZ3 TB3 TBZ GZ TGZ TAZ DIR TL4 TZ4 \
			TLZ4 LZ4 7Z T7Z LZ LZM LZMA XZ TLZ TXZ LRZ TLR TLRZ \
			LHA LZH ARJ ARZ ZIP JAR XPI CRATE CRA APK OKULAR RAR
		do	f=$1$i.$j
			test -f "$f" && return
		done
	done
	return 1
}

MainLoop() {
	currdir=$PWD
	cddone=false
	for progargs
	do	$cddone && Cd "$currdir"
		cddone=false
		pathname=$progargs
		while [ x"${pathname%/}" != x"$pathname" ]
		do	pathname=${pathname%/}
		done
		[ -z "${pathname:++}" ] && continue
		case $pathname in
		/*)	:;;
		*)	pathname=$currdir/$pathname;;
		esac
		Getf "$pathname" && DoCases \
			|| Error 1 "cannot find $pathname"
	done
}

umask=
IntoDir() {
	$mdir || return 0
	d=$toname
	[ -z "${d:++}" ] && d=${name##*/}
	if test -d "$d"
	then	if ! $force
		then	Error 1 "Directory $d already exists (try -f)"
			return 1
		fi
	else	[ -n "${umask:++}" ] || umask=`umask -S`
		mkdir -m "$umask" -- "$d" >/dev/null
	fi
	Cd "$d" && cddone=:
}

MyErr() {
	Error 2 "error when $mode $name (type $typ)
"
}
MyErrNot() {
	Error 2 "$mode $name not supported"
}

DoCases() {
	full=false
	name=${f%.*}
	case ${f##*/} in
	*.tar|*.TAR)
		typ=tar
		full=:;;
	*.dir|*.taz|*.tgz|*.crate|*.cra|*.DIR|*.TAZ|*.TGZ|*.CRATE|*.CRA)
		typ='tar.gz'
		full=:;;
	*.tbr|*.TBR)
		typ='tar.br'
		full=:;;
	*.tzs|*.tzst|*.tzstd|*.TZS|*.TZST|*.TZSTD)
		typ='tar.zst'
		full=:;;
	*.tl4|*.tz4|*.tlz4|*.TL4|*.TZ4|*.TLZ4)
		typ='tar.lz4'
		full=:;;
	*.tbz|*.tbz2|*.TBZ|*.TBZ2)
		typ='tar.bz2'
		full=:;;
	*.tb3|*.tbz3|*.TB3|*.TBZ3)
		typ='tar.bz3'
		full=:;;
	*.tlz|*.TLZ)
		typ='tar.lzma'
		full=:;;
	*.txz|*.TXZ)
		typ='tar.xz'
		full=:;;
	*.tlr|*.tlrz|*.TLR|*.TLRZ)
		typ='tar.lrz'
		full=:;;
	*.t7z|*.T7Z)
		typ='tar.7z'
		full=:;;
	*.gz|*.z|*.GZ|*.Z)
		typ='gz';;
	*.br|*.bro|*.brotli|*.BR|*.BRO|*.BROTLI)
		typ='br';;
	*.zst|*.zstd|*.ZST|*.ZSTD)
		typ='zst';;
	*.lz4|*.Lz4)
		typ='lz4';;
	*.bz3|*.BZ3)
		typ='bz3';;
	*.bz|*.bz2|*.BZ|*.BZ2)
		typ='bz2';;
	*.lm|*.lzm|*.lzma|*.LM|*.LZM|*.LZMA)
		typ='lzma';;
	*.xz|*.XZ)
		typ='xz';;
	*.lrz|*.LRZ)
		typ='lrz';;
	*.7z|*.7z)
		typ='7z';;
	*.zip|*.jar|*.xpi|*.apk|*.okular|*.ZIP|*.JAR|*.XPI|*.APK|*.OKULAR)
		typ='zip'
		full=:;;
	*.arz|*.ARZ)
		typ='arj.gz'
		full=:;;
	*.arj|*.ARJ)
		typ='arj';;
	*.lha|*.lzh|*.LHA|*.LZH)
		typ='lha'
		full=:;;
	*.rar|*.RAR)
		typ='rar'
		full=:;;
	*)
		return 1;;
	esac
	if ! $full
	then	case $name in
		*.tar|*.TAR)
			typ=tar.$typ
			name=${name%.*};;
		*.arj|*.ARJ)
			case $typ in
			gz)
				typ=arj.$typ
				name=${name%.*};;
			esac;;
		esac
	fi
	pwdname=${name##*/}
	DoIt
	return 0
}

unset bzip bzip3 brotli zstdbest lz4 gzip lzma xz lrzip za unzip unarj lha unrar
DoIt() {
	case $typ in
tar)
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		"$tarprg" -x $verboseopt ${1+"$@"} -f "$f" || MyErr;;
	s*)	"$tarprg" -t $verbose -f "$f" || MyErr;;
	t*)	MyErrNot;;
	esac;;
tar.gz)
	OptExternal gzip
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		if $tar_knows_gzip
		then	"$tarprg" -x $verboseopt $gzipflag ${1+"$@"} -f "$f"
		elif $tar_knows_use_compress_program
		then	"$tarprg" -x $verboseopt $taruse "$gzip" ${1+"$@"} -f "$f"
		else	"$gzip" -d -c -- "$f" | \
				"$tarprg" -x $verboseopt ${1+"$@"} -f -
		fi;;
	s*)	if $tar_knows_gzip
		then	"$tarprg" -t $verbose $gzipflag -f "$f"
		elif $tar_knows_use_compress_program
		then	"$tarprg" -t $verbose $taruse "$gzip" -f "$f"
		else	"$gzip" -d -c -- "$f" | "$tarprg" -t $verbose -f -
		fi;;
	t*)	"$gzip" -t -v -- "$f";;
	esac || MyErr;;
tar.br)
	OptExternal brotli
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		if $tar_knows_use_compress_program
		then	"$tarprg" -x $verboseopt $taruse "$brotli" ${1+"$@"} -f "$f"
		else	"$brotli" -d -c -- "$f" | \
				"$tarprg" -x $verboseopt ${1+"$@"} -f -
		fi;;
	s*)	if $tar_knows_use_compress_program
		then	"$tarprg" -t $verbose $taruse "$brotli" -f "$f"
		else	"$brotli" -d -c -- "$f" | "$tarprg" -t $verbose -f -
		fi;;
	t*)	Echo "$f"
		"$brotli" -t -v -- "$f";;
	esac || MyErr;;
tar.zst)
	OptExternal zstdbest
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		if $tar_knows_use_compress_program
		then	"$tarprg" -x $verboseopt $taruse "$zstdbest" ${1+"$@"} -f "$f"
		else	"$zstdbest" -d -c -- "$f" | \
				"$tarprg" -x $verboseopt ${1+"$@"} -f -
		fi || MyErr;;
	s*)	if $tar_knows_use_compress_program
		then	"$tarprg" -t $verbose $taruse "$zstdbest" -f "$f"
		else	"$zstdbest" -d -c -- "$f" | "$tarprg" -t $verbose -f -
		fi || MyErr;;
	t*)	"$zstdbest" -t -v -- "$f";;
	esac;;
tar.lz4)
	OptExternal lz4
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		if $tar_knows_use_compress_program
		then	"$tarprg" -x $verboseopt $taruse "$lz4" ${1+"$@"} -f "$f"
		else	"$lz4" -d -c "$f" | \
				"$tarprg" -x $verboseopt ${1+"$@"} -f -
		fi || MyErr;;
	s*)	if $tar_knows_use_compress_program
		then	"$tarprg" -t $verbose $taruse "$lz4" -f "$f"
		else	"$lz4" -d -c "$f" | "$tarprg" -t $verbose -f -
		fi || MyErr;;
	t*)	"$lz4" -t -v -- "$f";;
	esac;;
tar.bz2)
	OptExternal bzip bzip2
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		if $tar_knows_bzip
		then	"$tarprg" -x $verboseopt $bzipflag ${1+"$@"} -f "$f"
		elif $tar_knows_use_compress_program
		then	"$tarprg" -x $verboseopt $taruse "$bzip" ${1+"$@"} -f "$f"
		else	"$bzip" -d -k -c -- "$f" | \
				"$tarprg" -x $verboseopt ${1+"$@"} -f -
		fi;;
	s*)	if $tar_knows_bzip
		then	"$tarprg" -t $verbose $bzipflag -f "$f"
		elif $tar_knows_use_compress_program
		then	"$tarprg" -t $verbose $taruse "$bzip" -f "$f"
		else	"$bzip" -d -k -c -- "$f" | \
				"$tarprg" -t $verbose -f -
		fi;;
	t*)	"$bzip" -t -v -- "$f";;
	esac || MyErr;;
tar.bz3)
	OptExternal bzip3
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		if $tar_knows_use_compress_program
		then	"$tarprg" -x $verboseopt $taruse "$bzip3" ${1+"$@"} -f "$f"
		else	"$bzip3" -d -c -- "$f" | \
				"$tarprg" -x $verboseopt ${1+"$@"} -f -
		fi;;
	s*)	if $tar_knows_use_compress_program
		then	"$tarprg" -t $verbose $taruse "$bzip3" -f "$f"
		else	"$bzip3" -d -c -- "$f" | \
				"$tarprg" -t $verbose -f -
		fi;;
	t*)	"$bzip3" -t -- "$f" && echo "$f OK";;
	esac || MyErr;;
tar.lzma)
	OptExternal lzma
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		if $tar_knows_lzma
		then	"$tarprg" -x $verboseopt $lzmaflag ${1+"$@"} -f "$f"
		elif $tar_knows_use_compress_program
		then	"$tarprg" -x $verboseopt $taruse "$lzma" ${1+"$@"} -f "$f"
		else	"$lzma" -d -k -c -- "$f" | \
				"$tarprg" -x $verboseopt ${1+"$@"} -f -
		fi;;
	s*)	if $tar_knows_lzma
		then	"$tarprg" -t $verbose $lzmaflag -f "$f"
		elif $tar_knows_use_compress_program
		then	"$tarprg" -t $verbose $taruse "$lzma" -f "$f"
		else	"$lzma" -d -k -c -- "$f" | \
				"$tarprg" -t $verbose -f -
		fi;;
	t*)	"$lzma" -t -v -- "$f";;
	esac || MyErr;;
tar.xz)
	OptExternal xz
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		if $tar_knows_xz
		then	"$tarprg" -x $verboseopt $xzflag ${1+"$@"} -f "$f"
		elif $tar_knows_use_compress_program
		then	"$tarprg" -x $verboseopt $taruse "$xz" ${1+"$@"} -f "$f"
		else	"$xz" -d -k -c -- "$f" | \
				"$tarprg" -x $verboseopt ${1+"$@"} -f -
		fi;;
	s*)	if $tar_knows_xz
		then	"$tarprg" -t $verbose $xzflag -f "$f"
		elif $tar_knows_use_compress_program
		then	"$tarprg" -t $verbose $taruse "$xz" -f "$f"
		else	"$xz" -d -k -c -- "$f" | \
				"$tarprg" -t $verbose -f -
		fi;;
	t*)	"$xz" -t -v -- "$f";;
	esac || MyErr;;
tar.lrz)
	OptExternal lrzip
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		MkTemp && \
			"$lrzip" -d -o "$tempname" -- "$f" && \
			"$tarprg" -x $verboseopt ${1+"$@"} -f "$tempname" && \
			RmTemp \
			|| MyErr;;
	s*)	MkTemp && \
			"$lrzip" -d -o "$tempname" -- "$f" && \
			"$tarprg" -t $verbose -f "$tempname" && \
			RmTemp \
			|| MyErr;;
	t*)	MyErrNot;;
	esac;;
tar.7z)
	OptExternal za 7za
	case $mode in
	u*)	IntoDir || return
		eval "set -- a $taropts"
		shift
		"$za" -so e -- "$f" | "$tarprg" -x $verboseopt ${1+"$@"} -f -;;
	s*)	"$za" -so e -- "$f" | "$tarprg" -t $verbose -f -;;
	t*)	"$za" t -- "$f";;
	esac || MyErr;;
gz)
	OptExternal gzip
	case $mode in
	u*)	IntoDir || return
		if $mdir
		then	x=$name.gz
			ln -s -- "$f" "$x" || cp -a -- "$f" "$x" \
				&& "$gzip" -d -N -f -- "$x"
		else	"$gzip" -d -c -- "$f" >"$pwdname"
		fi;;
	s*)	"$gzip" -l -v -- "$f";;
	t*)	"$gzip" -t -v -- "$f";;
	esac || MyErr;;
br)
	OptExternal brotli
	case $mode in
	u*)	IntoDir || return
		"$brotli" -d -o "$pwdname" -- "$f" || MyErr;;
	s*)	MyErrNot;;
	t*)	Echo "$f"
		"$brotli" -t -v -- "$f" || MyErr;;
	esac;;
zst)
	OptExternal zstdbest
	case $mode in
	u*)	IntoDir || return
		"$zstdbest" -d -o "$pwdname" -- "$f";;
	s*)	"$zstdbest" -l -v -- "$f";;
	t*)	"$zstdbest" -t -v -- "$f";;
	esac || MyErr;;
lz4)
	OptExternal lz4
	case $mode in
	u*)	IntoDir || return
		"$lz4" -d "$f" "$pwdname" || MyErr;;
	s*)	MyErrNot;;
	t*)	"$lz4" -t -v "$f" || MyErr;;
	esac;;
bz2)
	OptExternal bzip bzip2
	case $mode in
	u*)	IntoDir || return
		if $mdir
		then	x=$name.bz2
			ln -s -- "$f" "$x" || cp -a -- "$f" "$x" \
				&& "$bzip" -d -- "$x"
		else	"$bzip" -d -k -c -- "$f" >"$pwdname"
		fi;;
	s*)	"$bzip" -l -v -- "$f";;
	t*)	"$bzip" -t -v -- "$f";;
	esac || MyErr;;
bz3)
	OptExternal bzip3
	case $mode in
	u*)	IntoDir || return
		if $mdir
		then	x=$name.bz3
			ln -s -- "$f" "$x" || cp -a -- "$f" "$x" \
				&& "$bzip3" -d -- "$x"
		else	"$bzip3" -d -c -- "$f" >"$pwdname"
		fi;;
	s*)	MyErrNot;;
	t*)	"$bzip3" -t -- "$f" && echo "$f OK";;
	esac || MyErr;;
lzma)
	OptExternal lzma
	case $mode in
	u*)	IntoDir || return
		"$lzma" -d -k $verboseopt -- "$f" || MyErr;;
	s*)	MyErrNot;;
	t*)	"$lzma" -t -v -- "$f" || MyErr;;
	esac;;
xz)
	OptExternal xz
	case $mode in
	u*)	IntoDir || return
		"$xz" -d -k $verboseopt -- "$f" || MyErr;;
	s*)	MyErrNot;;
	t*)	"$xz" -t -v -- "$f" || MyErr;;
	esac;;
lrz)
	OptExternal lrzip
	case $mode in
	u*)	IntoDir || return
		if $mdir
		then	"$lrzip" -d -- "$f"
		else	"$lrzip" -d -o "$pwdname" -- "$f"
		fi || MyErr;;
	s*)	MyErrNot;;
	t*)	MyErrNot;;
	esac;;
7z)
	OptExternal za 7za
	case $mode in
	u*)	IntoDir || return
		x='x'
		$junk && x='e'
		"$za" $x -- "$f";;
	s*)	"$za" l -- "$f";;
	t*)	"$za" t -- "$f";;
	esac || MyErr;;
zip)
	OptExternal unzip
	case $mode in
	u*)	IntoDir || return
		x=
		eval set -- a $zipopts
		shift
		"$unzip" ${1+"$@"} -- "$f";;
	s*)	x='-l'
		[ -n "${verbose:++}" ] && x='-v'
		"$unzip" $x -- "$f";;
	t*)	"$unzip" -t -- "$f";;
	esac || MyErr;;
arj)
	OptExternal unarj
	case $mode in
	u*)	IntoDir || return
		x='x'
		$junk && x='e'
		eval '"$unarj" $x -- "$f"'" $redir";;
	s*)	"$unarj" l -- "$f";;
	t*)	"$unarj" t -- "$f";;
	esac || MyErr;;
arj.gz)
	OptExternal unarj
	OptExternal gzip
	case $mode in
	u*)	IntoDir || return
		x='x'
		$junk && x='e'
		MkTemp && \
			"$gzip" -d -c -- "$f" >"$tempname" && \
			eval '"$unarj" $x -- "$tempname"'" $redir" && \
			RmTemp;;
	s*)	MkTemp && \
			"$gzip" -d -c -- "$f" >"$tempname" && \
			"$unarj" l -- "$tempname" && \
			RmTemp;;
	t*)	"$gzip" -t -v -- "$f" &&
			MkTemp && \
			"$gzip" -d -c -v -- "$f" >"$tempname" && \
			"$unarj" t -- "$tempname" && \
			RmTemp;;
	esac || MyErr;;
lha)
	OptExternal lha
	case $mode in
	u*)	IntoDir || return
		x='-x'
		$junk || x='-xi'
		eval '"$lha" $x -- "$f"'" $redir";;
	s*)	"$lha" -v -- "$f";;
	t*)	"$lha" -t -- "$f";;
	esac || MyErr;;
rar)
	OptExternal unrar
	case $mode in
	u*)	IntoDir || return
		x='x'
		$junk && x='e'
		"$unrar" ${quietopt:+-idq} $x -- "$f";;
	s*)	x='l'
		[ -n "${verbose:++}" ] && x='vt'
		"$unrar" $x -- "$f";;
	t*)	"$unrar" t -- "$f";;
	esac || MyErr;;
esac
}

MainLoop ${1+"$@"}
Exit
