#!/usr/bin/env sh
# This script is part of Martin V\"ath's archwrap project.
# (C) Martin V\"ath <martin at mvath.de>
# SPDX-License-Identifier: BSD-3-Clause
set -u
. archwrap.sh

set -f

Usage() {
	Echo "Usage: ${0##*/} [options] [path/]zipdir[/][.tgz]
Create archive ./zipdir.tgz with contents of zipdir
-@ path  store output in path/zipdir.tgz
         The typical call is -@ user@machine: or -@ user@mach:/tmp/
         to use remote connection via rsh (GNU tar) resp. ssh (star)
-R PATH  store output in PATH; use e.g. -R - for piping to stdout
-B use brotli   (archivename is ./zipdir.tbr or ./zipdir.tar.br)
-g use zopfli   (archivename is ./zipdir.tgz or ./zipdir.tar.gz)
-Q quick: Use gzip instead of zopfli (even if zopfli is available)
-b use bzip2    (archivename is ./zipdir.tbz or ./zipdir.tar.bz2)
-3 use bzip3    (archivename is ./zipdir.tb3 or ./zipdir.tar.bz3)
-l use lzma     (archivename is ./zipdir.tlz or ./zipdir.tar.lzma)
-L use xz       (archivename is ./zipdir.txz or ./zipdir.tar.xz)
-4 use lz4      (archivename is ./zipdir.tz4 or ./zipdir.tar.lz4)
-7 use 7z       (archivename is ./zipdir.t7z or ./zipdir.tar.7z)
-r use lrzip    (archivename is ./zipdir.tlr or ./zipdir.tar.lrz)
-z use zstd     (archivename is ./zipdir.tzs or ./zipdir.tar.zst)
-t use Tar only (archivename is ./zipdir.tar)
-X use long names (.tar.gz instead of .tgz etc)
-x use short names (.tgz instead of .tar.gz etc)
-S use star instead of tar, ignore GNUTARVERSION
-T use tar instead of star (default)
-A Store extended attributes (if unsupported by tar); default if XATTR is true
-C store as much as possible (Access Control Lists, creation time...)
-c be careful - avoid star -no-fsync; same as STAR_HAS_NOFSYNC=false
-F symbolic links are stored as such (default)
-f symbolic links are stored as files
-E break on error
-d pack also (parent) directory into archive, not only its content
-D pack (parent) directory as \".\" into archive, not only its content
-n store plain owner name
-p ignore GNUTARVERSION and STAR_HAS_NOFSYNC environment variables
-P print output appropriate for setting GNUTARVERSION and exit
-q be quiet"
	exit ${1:-1}
}

CalcXattr
use_star=false
follow=false
control=false
withparent=false
dotparent=false
xnames=false
ownernum=:
sparse=:
remote=
errbreak=false
comp=g
quiet=false
quick=false
calc_version_only=false
case ${0##*/} in
*tbr*)
	comp=B;;
*br*)
	comp=B
	xnames=:;;
*txz*)
	comp=x;;
*xz*)
	comp=x
	xnames=:;;
*tzs*)
	comp=z;;
*zst*)
	comp=z
	xnames=:;;
*tz4*|*tl4*|*tlz4*)
	comp=4;;
*lz4*)
	comp=4
	xnames=:;;
*tlz*)
	comp=l;;
*lz*)
	comp=l
	xnames=:;;
*tb*3*)
	comp=3;;
*bz*3*)
	comp=3
	xnames=:;;
*tbz*)
	comp=b;;
*bz*)
	comp=b
	xnames=:;;
*tgz*)
	comp=g;;
*gz*)
	comp=g
	xnames=:;;
*t7z*)
	comp=7;;
*7z*)
	comp=7
	xnames=:;;
*tlr*)
	comp=r;;
*lr*)
	comp=r
	xnames=:;;
*tar*)
	comp=;;
esac
OPTIND=1
while getopts 'qQAF@:R:SETcCfdDnBzbg734lLzmrtpPsXxhH' opt
do	case $opt in
	q)	quiet=:;;
	Q)	quick=:;;
	A)	xattr=:;;
	F)	follow=false;;
	S)	use_star=:;;
	T)	use_star=false;;
	c)	unset STAR_HAS_NOFSYNC;;
	C)	control=:;;
	E)	errbreak=:;;
	f)	follow=:;;
	d)	withparent=:
		dotparent=false;;
	D)	withparent=:
		dotparent=false;;
	n)	ownernum=;;
	t)	comp=;;
	p)	unset GNUTARVERSION STAR_HAS_NOFSYNC;;
	P)	calc_version_only=:;;
	s)	sparse=;;
	B)	comp=B;;
	B)	comp=z;;
	b)	comp=b;;
	g)	comp=g;;
	[lzm])	comp=l;;
	L)	comp=x;;
	7)	comp=7;;
	3)	comp=3;;
	4)	comp=4;;
	r)	comp=r;;
	X)	xnames=:;;
	x)	xnames=false;;
	'@')	remote=r
		remotepath=$OPTARG;;
	R)	remote=R
		remotepath=$OPTARG;;
	'?')	exit 1;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND - 1 ))

unset tarprg xzbest brotlibest bzipbest bzip3best gzipbest sevenzbest lzmabest \
	lrzip zstdbest lz4best

if $calc_version_only
then	CalcGnuTarVersion && printf '%s' "$GNUTARVERSION"
	exit
fi

[ $# -ne 0 ] || Usage

if [ -n "${remote:++}" ]
then	export RSH
	[ -n "${RSH:++}" ] || RSH=`command -v ssh 2>/dev/null`
fi

SetTarPrg
Push -c taropts '-c'
$quiet || Push taropts '-v'
! $follow || Push taropts '-h'

tarcomp=:
errfile=false
if $use_star
then	Push taropts '-H=exustar'
	# Push taropts '-H=pax'
	! $xattr || Push taropts '-xattr'
	! $control || Push taropts '-acl' '-xfflags'
	#Push taropts "-dirmode"
	! $ownernum || Push taropts '-numeric'
	! $sparse || Push taropts '-sparse'
	! $star_has_nofsync || Push taropts '-no-fsync'
	case $comp in
	g)	CalcGzipbest $quick
		if [ "$gziptext" = gzip ]
		then	Push taropts '-z'
			STAR_COMPRESS_FLAG='-9'
			export STAR_COMPRESS_FLAG
		else	tarcomp=false
		fi;;
	b)	Push taropts '-bz'
		STAR_COMPRESS_FLAG='-9'
		export STAR_COMPRESS_FLAG;;
	*)
		tarcomp=false;;
	esac
else	! $xattr || ! $tar_knows_xattr || Push taropts '--xattrs'
	! $tar_knows_numeric_owner || ! $ownernum || Push taropts '--numeric-owner'
	! $tar_knows_sort || Push taropts '--sort=name'
	! $tar_knows_sparse || Push taropts '-S'
	! $tar_knows_use_compress_program || case $comp in
	x)	OptExternal xzbest
		Push taropts '--use-compress-program' "$xzbest";;
	B)	OptExternal brotlibest
		Push taropts '--use-compress-program' "$brotlibest";;
	b)	OptExternal bzipbest
		Push taropts '--use-compress-program' "$bzip3best";;
	3)	OptExternal bzip3best
		Push taropts '--use-compress-program' "$bzip3best";;
	z)	OptExternal zstdbest
		Push taropts '--use-compress-program' "$zstdbest";;
	g)	CalcGzipbest $quick
		if [ "$gziptext" = gzip ]
		then	Push taropts '--use-compress-program' "$gzipbest"
		else	tarcomp=false
		fi;;
	4)	OptExternal lz4best
		Push taropts '--use-compress-program' "$lz4best";;
	7)	OptExternal sevenzbest 7zbest
		Push taropts '--use-compress-program' "$sevenzbest";;
	l)	OptExternal lzmabest
		Push taropts '--use-compress-program' "$lzmabest";;
	r)	tarcomp=false;;
	esac
fi
$tarcomp || ! $tar_needs_errfile || errfile=:
if $xnames
then	case $comp in
	g)	ext='tar.gz';;
	B)	ext='tar.br';;
	b)	ext='tar.bz2';;
	3)	ext='tar.bz3';;
	z)	ext='tar.zst';;
	7)	ext='tar.7z';;
	4)	ext='tar.lz4';;
	l)	ext='tar.lzma';;
	x)	ext='tar.xz';;
	r)	ext='tar.lrz';;
	*)	ext='tar';;
	esac
else	case $comp in
	g)	ext='tgz';;
	B)	ext='tbr';;
	b)	ext='tbz';;
	3)	ext='tb3';;
	z)	ext='tzs';;
	7)	ext='t7z';;
	4)	ext='tz4';;
	l)	ext='tlz';;
	x)	ext='txz';;
	r)	ext='tlr';;
	*)	ext='tar';;
	esac
fi

Tarit() {
	if [ -z "${remote:++}" ]
	then	archive=$d/$name.$1
		rm -f -- "$archive"
	elif [ x"$remote" = x'r' ]
	then	archive=$remotepath$name.$1
	else	archive=$remotepath
	fi
	shift
	Cd "$dirname" || return
	stat=0
	if $errfile
	then	MkTemp || stat=$?
	fi
	if $withparent
	then	if $dotparent
		then	Push -c topack '.'
		else	Push -c topack "${name##*/}"
		fi
		Cd .. || stat=$?
	else	PushTopack || {
			stat=2
			Error $stat "not creating empty archive $archive"
		}
	fi
	[ $stat -eq 0 ] && if $errfile
	then	eval "\"\$tarprg\" \"\$@\" -f \"\$archive\" -- $topack 2>\"\$tempname\""
	else	eval "\"\$tarprg\" \"\$@\" -f \"\$archive\" -- $topack"
	fi || stat=$?
	if $errfile
	then	if test -s "$tempname"
		then	ErrMessage "tar of $name led to the following error message:"
			cat -- "$tempname" >&2
			[ $stat -eq 0 ] && stat=2
		fi
		RmTemp
	fi
	Cd "$d" || stat=$?
	[ $stat -eq 0 ] || Error $stat "error occured during tar of $name"
}

MainLoop() {
	d=$PWD
	for progargs
	do	dirname=$progargs
		while [ x"${dirname%/}" != x"$dirname" ]
		do	dirname=${dirname%/}
		done
		DoDir
	done
}

StripDirname() {
	for strip in taz tgz tbz dir tlz tlrz tlr tzst tzs tbr
	do	case $dirname in
		*."$strip")
			dirname=${dirname%.*}
			return;;
		esac
	done
	for strip in z gz bz bz2 7z t7z lz lzm lzma lrz zst br bro brotli
	do	case $dirname in
		*.tar."$strip")
			dirname=${dirname%.*.*}
			return;;
		*."$strip")
			dirname=${dirname%.*}
			return;;
		esac
	done
}

DoDir() {
	StripDirname
	if [ -z "${dirname:++}" ] || ! test -d "$dirname"
	then	Error 2 "could not find Directory $dirname"
		return
	fi
	name=${dirname##*/}
	: ${name:=_}
	eval "set -- a $taropts"
	shift
	if $tarcomp
	then	Tarit "$ext" ${1+"$@"}
		return
	fi
	Tarit tar ${1+"$@"}
	case ${comp:-R} in
	R)	return;;
	g)	CalcGzipbest $quick
		"$gzipbest" -c -- "$archive" >|"$name.$ext";;
	B)	OptExternal brotlibest
		"$brotlibest" -o "$name.$ext" -- "$archive";;
	b)	OptExternal bzipbest
		"$bzipbest" -k -c -- "$archive" >|"$name.$ext";;
	3)	OptExternal bzip3best
		"$bzip3best" -c -- "$archive" >|"$name.$ext";;
	z)	OptExternal zstdbest
		"$zstdbest" -o "$name.$ext" <"$archive";;
	7)	OptExternal sevenzbest 7zbest
		"$sevenzbest" <"$archive" >|"$name.$ext";;
	4)	OptExternal lz4best
		"$lz4best" "$archive" "$name.$ext";;
	l)	OptExternal lzmabest
		"$lzmabest" -k -c -- "$archive" >|"$name.$ext";;
	x)	OptExternal xzbest
		"$xzbest" -k -c -- "$archive" >|"$name.$ext";;
	r)	OptExternal lrzip
		"$lrzip" -L 9 -o "$name.$ext" -- "$archive";;
	esac || {
		Error $? "error when compressing $archive; keeping on disk" >&2
		return
	}
	rm -f -- "$archive"
}

MainLoop ${1+"$@"}
Exit
